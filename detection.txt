Peter Ferrie posted some nice code to detect 64-bit [here][1]

It got me thinking about other ways to do it but it seems he really did pick
the most efficient code he could find.

All the combinations I found exceeded 5 bytes but there's always
possibility more exist.

I was using NASM which is what I suspect Peter uses too because the encodings
with other assemblers like JWASM/MASM are different.

It supports mixing 32 and 64 bit code too which is useful.

       bits 32
        xor   eax, eax
        dec   eax
        xchg  eax, ecx
        jns   is_64bit
        ; execute 32-bit code
    is_64bit:
        bits 64
        ; execute 64-bit code

32-bit translation

    /* 00000000 */  "\0x31\0xC0"                           /*  xor eax, eax
    /* 00000002 */  "\0x48"                                /*  dec eax
    /* 00000003 */  "\0x91"                                /*  xchg eax, ecx
    /* 00000004 */  "\0x79\0x00"                           /*  jns 00000006h

64-bit translation

    /* 00000000 */  "\0x31\0xC0"                           /*  xor eax, eax
    /* 00000002 */  "\0x48\0x91"                           /*  xchg rax, rcx
    /* 00000004 */  "\0x79\0x00"                           /*  jns 00000006h

Just another example of how to do it but loads more should be possible :), I'll add some more
later.

   [1]: http://pferrie.host22.com/misc/isx64.htm


